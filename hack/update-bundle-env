#!/usr/bin/env python
import subprocess
import json
import re
import argparse
from urllib.request import urlopen, Request
from datetime import datetime

def is_latest_creationTimestamp(a, b):
    """
    verifies creation timestamp of two resources
    returns True if resource B is more recent than A
    """
    date_a = datetime.fromisoformat(a["metadata"]["creationTimestamp"])
    date_b = datetime.fromisoformat(b["metadata"]["creationTimestamp"])
    return date_a < date_b

def get_latest_resource(resources):
    latest_resource = None
    for resource in resources["items"]:
        if not latest_resource or is_latest_creationTimestamp(latest_resource, resource):
            latest_resource = resource
    return latest_resource

def get_snapshot(args):
    if args.snapshot:
        p = subprocess.run(["kubectl", "get", "snapshot", args.snapshot, "-o", "json"], capture_output=True, text=True, check=True)
        return json.loads(p.stdout)
    elif args.commit:
        p = subprocess.run(["kubectl", "get", "snapshot", "-l", f"appstudio.openshift.io/application=tempo,pac.test.appstudio.openshift.io/sha={args.commit}", "-o", "json"], capture_output=True, text=True, check=True)
        snapshots = json.loads(p.stdout)
        if len(snapshots["items"]) == 0:
            raise Exception("No snapshot found.")
        return get_latest_resource(snapshots)
    else:
        p = subprocess.run(["kubectl", "get", "snapshot", "-l", "appstudio.openshift.io/application=tempo,pac.test.appstudio.openshift.io/event-type=push", "-o", "json"], capture_output=True, text=True, check=True)
        snapshots = json.loads(p.stdout)
        if len(snapshots["items"]) == 0:
            raise Exception("No snapshot found.")
        return get_latest_resource(snapshots)

COMMIT_CACHE = {}
def get_commit_info(commit):
    if commit in COMMIT_CACHE:
        return COMMIT_CACHE[commit]

    url = f"https://api.github.com/repos/os-observability/konflux-tempo/commits/{commit}"
    with urlopen(Request(url)) as response:
        COMMIT_CACHE[commit] = json.load(response)
    return COMMIT_CACHE[commit]

def main():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--snapshot')
    group.add_argument('--commit')
    args = parser.parse_args()

    with open("bundle-patch/bundle.env", "r") as f:
        bundle_env = f.read()

    snapshot = get_snapshot(args)
    components = [{**component, "commit_info": get_commit_info(component["source"]["git"]["revision"])} for component in snapshot["spec"]["components"]]
    components_sorted = sorted(components, key=lambda component: component["commit_info"]["commit"]["committer"]["date"]+component["name"])

    print(f"Snapshot {snapshot['metadata']['name']}\n")
    print(f"{'COMPONENT':<18}  {'COMMIT DATE':<20}  {'REVISION':<40}")
    for component in components_sorted:
        name = component["name"]
        pullspec = component["containerImage"]
        revision = component["source"]["git"]["revision"]
        commit_date = component["commit_info"]["commit"]["committer"]["date"]
        env_name = f"{name.upper().replace("-", "_")}_IMAGE_PULLSPEC"
        line_regexp = f"^{env_name}=.+$"

        print(f"{name:<18}  {commit_date:<20}  {revision:<40}")
        if name.endswith("-bundle") or name.endswith("-bundle-quay"):
            continue

        if not re.search(line_regexp, bundle_env, flags=re.MULTILINE):
            raise Exception(f"Cannot find env var {env_name} in bundle.env")
        bundle_env = re.sub(line_regexp, f"{env_name}={pullspec}", bundle_env, flags=re.MULTILINE)

    with open("bundle-patch/bundle.env", "w") as f:
        f.write(bundle_env)

if __name__ == "__main__":
    main()
