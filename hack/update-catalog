#!/usr/bin/env python
import subprocess
import json
import argparse
import yaml

def get_bundle_pullspec(args):
    p = subprocess.run(["kubectl", "get", "snapshot", args.snapshot, "-o", "json"], capture_output=True, text=True, check=True)
    snapshot = json.loads(p.stdout)

    for component in snapshot["spec"]["components"]:
        if component["name"] == "tempo-bundle":
            return component["containerImage"]
    return None

def update_catalog_template(bundle_pullspec):
    with open("bundle-patch/patch_csv.yaml", "r") as f:
        bundle_patch = yaml.safe_load(f)

    with open("catalog/catalog-template.yaml", "r") as f:
        catalog_template = yaml.safe_load(f)

    catalog_template["entries"][1]["entries"].append({
        "name": bundle_patch["metadata"]["name"],
        "replaces": bundle_patch["spec"]["replaces"],
        "skipRange": bundle_patch["metadata"]["extra_annotations"]["olm.skipRange"]
    })
    catalog_template["entries"].append({
        "image": bundle_pullspec,
        "schema": "olm.bundle",
    })

    with open("catalog/catalog-template.yaml", "w") as f:
        content = "---\n" + yaml.dump(catalog_template)
        f.write(content)

def update_catalog():
    subprocess.run("""
    opm alpha render-template basic --output yaml catalog/catalog-template.yaml > catalog/tempo-product/catalog.yaml &&
    opm alpha render-template basic --output yaml --migrate-level bundle-object-to-csv-metadata catalog/catalog-template.yaml > catalog/tempo-product-4.17/catalog.yaml &&
    sed -i 's#quay.io/redhat-user-workloads/rhosdt-tenant/tempo/tempo-bundle#registry.redhat.io/rhosdt/tempo-operator-bundle#g' catalog/tempo-product/catalog.yaml &&
    sed -i 's#quay.io/redhat-user-workloads/rhosdt-tenant/tempo/tempo-bundle#registry.redhat.io/rhosdt/tempo-operator-bundle#g' catalog/tempo-product-4.17/catalog.yaml &&
    opm validate catalog/tempo-product &&
    opm validate catalog/tempo-product-4.17
    """, shell=True, check=True)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--snapshot', required=True)
    args = parser.parse_args()

    print("Get bundle pullspec from snapshot...")
    bundle_pullspec = get_bundle_pullspec(args)
    if not bundle_pullspec:
        raise Exception("bundle image not found")

    print("Updating catalog-template.yaml...")
    update_catalog_template(bundle_pullspec)

    print("Updating catalog...")
    update_catalog()

if __name__ == "__main__":
    main()
